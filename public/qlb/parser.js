Qlb.parser = (function(){
  /*
   * Generated by PEG.js 0.7.0.
   *
   * http://pegjs.majda.cz/
   */
  
  function quote(s) {
    /*
     * ECMA-262, 5th ed., 7.8.4: All characters may appear literally in a
     * string literal except for the closing quote character, backslash,
     * carriage return, line separator, paragraph separator, and line feed.
     * Any character may appear in the form of an escape sequence.
     *
     * For portability, we also escape escape all control and non-ASCII
     * characters. Note that "\0" and "\v" escape sequences are not used
     * because JSHint does not like the first and IE the second.
     */
     return '"' + s
      .replace(/\\/g, '\\\\')  // backslash
      .replace(/"/g, '\\"')    // closing quote character
      .replace(/\x08/g, '\\b') // backspace
      .replace(/\t/g, '\\t')   // horizontal tab
      .replace(/\n/g, '\\n')   // line feed
      .replace(/\f/g, '\\f')   // form feed
      .replace(/\r/g, '\\r')   // carriage return
      .replace(/[\x00-\x07\x0B\x0E-\x1F\x80-\uFFFF]/g, escape)
      + '"';
  }
  
  var result = {
    /*
     * Parses the input with a generated parser. If the parsing is successfull,
     * returns a value explicitly or implicitly specified by the grammar from
     * which the parser was generated (see |PEG.buildParser|). If the parsing is
     * unsuccessful, throws |PEG.parser.SyntaxError| describing the error.
     */
    parse: function(input, startRule) {
      var parseFunctions = {
        "start": parse_start,
        "literal": parse_literal,
        "list": parse_list,
        "symbol": parse_symbol,
        "string": parse_string,
        "number": parse_number,
        "hrf": parse_hrf,
        "rqm": parse_rqm,
        "wahad": parse_wahad,
        "tnein": parse_tnein,
        "tlateh": parse_tlateh,
        "arbaa": parse_arbaa,
        "khamseh": parse_khamseh,
        "sitteh": parse_sitteh,
        "sabaa": parse_sabaa,
        "tmaneh": parse_tmaneh,
        "tisaa": parse_tisaa,
        "siffr": parse_siffr,
        "space": parse_space
      };
      
      if (startRule !== undefined) {
        if (parseFunctions[startRule] === undefined) {
          throw new Error("Invalid rule name: " + quote(startRule) + ".");
        }
      } else {
        startRule = "start";
      }
      
      var pos = 0;
      var reportFailures = 0;
      var rightmostFailuresPos = 0;
      var rightmostFailuresExpected = [];
      
      function padLeft(input, padding, length) {
        var result = input;
        
        var padLength = length - input.length;
        for (var i = 0; i < padLength; i++) {
          result = padding + result;
        }
        
        return result;
      }
      
      function escape(ch) {
        var charCode = ch.charCodeAt(0);
        var escapeChar;
        var length;
        
        if (charCode <= 0xFF) {
          escapeChar = 'x';
          length = 2;
        } else {
          escapeChar = 'u';
          length = 4;
        }
        
        return '\\' + escapeChar + padLeft(charCode.toString(16).toUpperCase(), '0', length);
      }
      
      function matchFailed(failure) {
        if (pos < rightmostFailuresPos) {
          return;
        }
        
        if (pos > rightmostFailuresPos) {
          rightmostFailuresPos = pos;
          rightmostFailuresExpected = [];
        }
        
        rightmostFailuresExpected.push(failure);
      }
      
      function parse_start() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_space();
        result0 = result0 !== null ? result0 : "";
        if (result0 !== null) {
          result1 = [];
          result2 = parse_literal();
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_literal();
          }
          if (result1 !== null) {
            result2 = parse_space();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, content) { return content })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_literal() {
        var result0;
        
        result0 = parse_string();
        if (result0 === null) {
          result0 = parse_number();
          if (result0 === null) {
            result0 = parse_symbol();
            if (result0 === null) {
              result0 = parse_list();
            }
          }
        }
        return result0;
      }
      
      function parse_list() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 40) {
          result0 = "(";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"(\"");
          }
        }
        if (result0 !== null) {
          result1 = parse_start();
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 41) {
              result2 = ")";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\")\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_space();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, content) { return content })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_symbol() {
        var result0, result1, result2;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result0 = parse_hrf();
        if (result0 !== null) {
          result1 = [];
          result2 = parse_hrf();
          if (result2 === null) {
            if (/^[\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669]");
              }
            }
            if (result2 === null) {
              if (input.charCodeAt(pos) === 45) {
                result2 = "-";
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("\"-\"");
                }
              }
              if (result2 === null) {
                if (input.charCodeAt(pos) === 1567) {
                  result2 = "\u061F";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\u061F\"");
                  }
                }
                if (result2 === null) {
                  if (input.charCodeAt(pos) === 1600) {
                    result2 = "\u0640";
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\u0640\"");
                    }
                  }
                }
              }
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            result2 = parse_hrf();
            if (result2 === null) {
              if (/^[\u0660\u0661\u0662\u0663\u0664\u0665\u0666\u0667\u0668\u0669]/.test(input.charAt(pos))) {
                result2 = input.charAt(pos);
                pos++;
              } else {
                result2 = null;
                if (reportFailures === 0) {
                  matchFailed("[\\u0660\\u0661\\u0662\\u0663\\u0664\\u0665\\u0666\\u0667\\u0668\\u0669]");
                }
              }
              if (result2 === null) {
                if (input.charCodeAt(pos) === 45) {
                  result2 = "-";
                  pos++;
                } else {
                  result2 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"-\"");
                  }
                }
                if (result2 === null) {
                  if (input.charCodeAt(pos) === 1567) {
                    result2 = "\u061F";
                    pos++;
                  } else {
                    result2 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\u061F\"");
                    }
                  }
                  if (result2 === null) {
                    if (input.charCodeAt(pos) === 1600) {
                      result2 = "\u0640";
                      pos++;
                    } else {
                      result2 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"\\u0640\"");
                      }
                    }
                  }
                }
              }
            }
          }
          if (result1 !== null) {
            result2 = parse_space();
            result2 = result2 !== null ? result2 : "";
            if (result2 !== null) {
              result0 = [result0, result1, result2];
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, first, rest) { var sym = (first + rest.join("")).replace(/ـ/g, ""); Qlb.symbols[sym] = true; return sym; })(pos0, result0[0], result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_string() {
        var result0, result1, result2, result3;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        if (input.charCodeAt(pos) === 34) {
          result0 = "\"";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\\"\"");
          }
        }
        if (result0 !== null) {
          result1 = [];
          if (/^[^""]/.test(input.charAt(pos))) {
            result2 = input.charAt(pos);
            pos++;
          } else {
            result2 = null;
            if (reportFailures === 0) {
              matchFailed("[^\"\"]");
            }
          }
          while (result2 !== null) {
            result1.push(result2);
            if (/^[^""]/.test(input.charAt(pos))) {
              result2 = input.charAt(pos);
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("[^\"\"]");
              }
            }
          }
          if (result1 !== null) {
            if (input.charCodeAt(pos) === 34) {
              result2 = "\"";
              pos++;
            } else {
              result2 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\\"\"");
              }
            }
            if (result2 !== null) {
              result3 = parse_space();
              result3 = result3 !== null ? result3 : "";
              if (result3 !== null) {
                result0 = [result0, result1, result2, result3];
              } else {
                result0 = null;
                pos = pos1;
              }
            } else {
              result0 = null;
              pos = pos1;
            }
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, str) { return str.join("") })(pos0, result0[1]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_number() {
        var result0, result1;
        var pos0, pos1;
        
        pos0 = pos;
        pos1 = pos;
        result1 = parse_rqm();
        if (result1 === null) {
          if (input.charCodeAt(pos) === 1548) {
            result1 = "\u060C";
            pos++;
          } else {
            result1 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u060C\"");
            }
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            result1 = parse_rqm();
            if (result1 === null) {
              if (input.charCodeAt(pos) === 1548) {
                result1 = "\u060C";
                pos++;
              } else {
                result1 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\u060C\"");
                }
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result1 = parse_space();
          result1 = result1 !== null ? result1 : "";
          if (result1 !== null) {
            result0 = [result0, result1];
          } else {
            result0 = null;
            pos = pos1;
          }
        } else {
          result0 = null;
          pos = pos1;
        }
        if (result0 !== null) {
          result0 = (function(offset, d) { return parseFloat(d.join('').replace(/،/g, ".")) })(pos0, result0[0]);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_hrf() {
        var result0;
        
        if (input.charCodeAt(pos) === 1574) {
          result0 = "\u0626";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0626\"");
          }
        }
        if (result0 === null) {
          if (input.charCodeAt(pos) === 1571) {
            result0 = "\u0623";
            pos++;
          } else {
            result0 = null;
            if (reportFailures === 0) {
              matchFailed("\"\\u0623\"");
            }
          }
          if (result0 === null) {
            if (input.charCodeAt(pos) === 1575) {
              result0 = "\u0627";
              pos++;
            } else {
              result0 = null;
              if (reportFailures === 0) {
                matchFailed("\"\\u0627\"");
              }
            }
            if (result0 === null) {
              if (input.charCodeAt(pos) === 1576) {
                result0 = "\u0628";
                pos++;
              } else {
                result0 = null;
                if (reportFailures === 0) {
                  matchFailed("\"\\u0628\"");
                }
              }
              if (result0 === null) {
                if (input.charCodeAt(pos) === 1580) {
                  result0 = "\u062C";
                  pos++;
                } else {
                  result0 = null;
                  if (reportFailures === 0) {
                    matchFailed("\"\\u062C\"");
                  }
                }
                if (result0 === null) {
                  if (input.charCodeAt(pos) === 1583) {
                    result0 = "\u062F";
                    pos++;
                  } else {
                    result0 = null;
                    if (reportFailures === 0) {
                      matchFailed("\"\\u062F\"");
                    }
                  }
                  if (result0 === null) {
                    if (input.charCodeAt(pos) === 1607) {
                      result0 = "\u0647";
                      pos++;
                    } else {
                      result0 = null;
                      if (reportFailures === 0) {
                        matchFailed("\"\\u0647\"");
                      }
                    }
                    if (result0 === null) {
                      if (input.charCodeAt(pos) === 1608) {
                        result0 = "\u0648";
                        pos++;
                      } else {
                        result0 = null;
                        if (reportFailures === 0) {
                          matchFailed("\"\\u0648\"");
                        }
                      }
                      if (result0 === null) {
                        if (input.charCodeAt(pos) === 1586) {
                          result0 = "\u0632";
                          pos++;
                        } else {
                          result0 = null;
                          if (reportFailures === 0) {
                            matchFailed("\"\\u0632\"");
                          }
                        }
                        if (result0 === null) {
                          if (input.charCodeAt(pos) === 1581) {
                            result0 = "\u062D";
                            pos++;
                          } else {
                            result0 = null;
                            if (reportFailures === 0) {
                              matchFailed("\"\\u062D\"");
                            }
                          }
                          if (result0 === null) {
                            if (input.charCodeAt(pos) === 1578) {
                              result0 = "\u062A";
                              pos++;
                            } else {
                              result0 = null;
                              if (reportFailures === 0) {
                                matchFailed("\"\\u062A\"");
                              }
                            }
                            if (result0 === null) {
                              if (input.charCodeAt(pos) === 1610) {
                                result0 = "\u064A";
                                pos++;
                              } else {
                                result0 = null;
                                if (reportFailures === 0) {
                                  matchFailed("\"\\u064A\"");
                                }
                              }
                              if (result0 === null) {
                                if (input.charCodeAt(pos) === 1603) {
                                  result0 = "\u0643";
                                  pos++;
                                } else {
                                  result0 = null;
                                  if (reportFailures === 0) {
                                    matchFailed("\"\\u0643\"");
                                  }
                                }
                                if (result0 === null) {
                                  if (input.charCodeAt(pos) === 1604) {
                                    result0 = "\u0644";
                                    pos++;
                                  } else {
                                    result0 = null;
                                    if (reportFailures === 0) {
                                      matchFailed("\"\\u0644\"");
                                    }
                                  }
                                  if (result0 === null) {
                                    if (input.charCodeAt(pos) === 1605) {
                                      result0 = "\u0645";
                                      pos++;
                                    } else {
                                      result0 = null;
                                      if (reportFailures === 0) {
                                        matchFailed("\"\\u0645\"");
                                      }
                                    }
                                    if (result0 === null) {
                                      if (input.charCodeAt(pos) === 1606) {
                                        result0 = "\u0646";
                                        pos++;
                                      } else {
                                        result0 = null;
                                        if (reportFailures === 0) {
                                          matchFailed("\"\\u0646\"");
                                        }
                                      }
                                      if (result0 === null) {
                                        if (input.charCodeAt(pos) === 1602) {
                                          result0 = "\u0642";
                                          pos++;
                                        } else {
                                          result0 = null;
                                          if (reportFailures === 0) {
                                            matchFailed("\"\\u0642\"");
                                          }
                                        }
                                        if (result0 === null) {
                                          if (input.charCodeAt(pos) === 1588) {
                                            result0 = "\u0634";
                                            pos++;
                                          } else {
                                            result0 = null;
                                            if (reportFailures === 0) {
                                              matchFailed("\"\\u0634\"");
                                            }
                                          }
                                          if (result0 === null) {
                                            if (input.charCodeAt(pos) === 1593) {
                                              result0 = "\u0639";
                                              pos++;
                                            } else {
                                              result0 = null;
                                              if (reportFailures === 0) {
                                                matchFailed("\"\\u0639\"");
                                              }
                                            }
                                            if (result0 === null) {
                                              if (input.charCodeAt(pos) === 1585) {
                                                result0 = "\u0631";
                                                pos++;
                                              } else {
                                                result0 = null;
                                                if (reportFailures === 0) {
                                                  matchFailed("\"\\u0631\"");
                                                }
                                              }
                                              if (result0 === null) {
                                                if (input.charCodeAt(pos) === 1578) {
                                                  result0 = "\u062A";
                                                  pos++;
                                                } else {
                                                  result0 = null;
                                                  if (reportFailures === 0) {
                                                    matchFailed("\"\\u062A\"");
                                                  }
                                                }
                                                if (result0 === null) {
                                                  if (input.charCodeAt(pos) === 1591) {
                                                    result0 = "\u0637";
                                                    pos++;
                                                  } else {
                                                    result0 = null;
                                                    if (reportFailures === 0) {
                                                      matchFailed("\"\\u0637\"");
                                                    }
                                                  }
                                                  if (result0 === null) {
                                                    if (input.charCodeAt(pos) === 1577) {
                                                      result0 = "\u0629";
                                                      pos++;
                                                    } else {
                                                      result0 = null;
                                                      if (reportFailures === 0) {
                                                        matchFailed("\"\\u0629\"");
                                                      }
                                                    }
                                                    if (result0 === null) {
                                                      if (input.charCodeAt(pos) === 1587) {
                                                        result0 = "\u0633";
                                                        pos++;
                                                      } else {
                                                        result0 = null;
                                                        if (reportFailures === 0) {
                                                          matchFailed("\"\\u0633\"");
                                                        }
                                                      }
                                                      if (result0 === null) {
                                                        if (input.charCodeAt(pos) === 1583) {
                                                          result0 = "\u062F";
                                                          pos++;
                                                        } else {
                                                          result0 = null;
                                                          if (reportFailures === 0) {
                                                            matchFailed("\"\\u062F\"");
                                                          }
                                                        }
                                                        if (result0 === null) {
                                                          if (input.charCodeAt(pos) === 1601) {
                                                            result0 = "\u0641";
                                                            pos++;
                                                          } else {
                                                            result0 = null;
                                                            if (reportFailures === 0) {
                                                              matchFailed("\"\\u0641\"");
                                                            }
                                                          }
                                                          if (result0 === null) {
                                                            if (input.charCodeAt(pos) === 1594) {
                                                              result0 = "\u063A";
                                                              pos++;
                                                            } else {
                                                              result0 = null;
                                                              if (reportFailures === 0) {
                                                                matchFailed("\"\\u063A\"");
                                                              }
                                                            }
                                                            if (result0 === null) {
                                                              if (input.charCodeAt(pos) === 1582) {
                                                                result0 = "\u062E";
                                                                pos++;
                                                              } else {
                                                                result0 = null;
                                                                if (reportFailures === 0) {
                                                                  matchFailed("\"\\u062E\"");
                                                                }
                                                              }
                                                              if (result0 === null) {
                                                                if (input.charCodeAt(pos) === 1589) {
                                                                  result0 = "\u0635";
                                                                  pos++;
                                                                } else {
                                                                  result0 = null;
                                                                  if (reportFailures === 0) {
                                                                    matchFailed("\"\\u0635\"");
                                                                  }
                                                                }
                                                                if (result0 === null) {
                                                                  if (input.charCodeAt(pos) === 1584) {
                                                                    result0 = "\u0630";
                                                                    pos++;
                                                                  } else {
                                                                    result0 = null;
                                                                    if (reportFailures === 0) {
                                                                      matchFailed("\"\\u0630\"");
                                                                    }
                                                                  }
                                                                  if (result0 === null) {
                                                                    if (input.charCodeAt(pos) === 1606) {
                                                                      result0 = "\u0646";
                                                                      pos++;
                                                                    } else {
                                                                      result0 = null;
                                                                      if (reportFailures === 0) {
                                                                        matchFailed("\"\\u0646\"");
                                                                      }
                                                                    }
                                                                    if (result0 === null) {
                                                                      if (input.charCodeAt(pos) === 1605) {
                                                                        result0 = "\u0645";
                                                                        pos++;
                                                                      } else {
                                                                        result0 = null;
                                                                        if (reportFailures === 0) {
                                                                          matchFailed("\"\\u0645\"");
                                                                        }
                                                                      }
                                                                      if (result0 === null) {
                                                                        if (input.charCodeAt(pos) === 1592) {
                                                                          result0 = "\u0638";
                                                                          pos++;
                                                                        } else {
                                                                          result0 = null;
                                                                          if (reportFailures === 0) {
                                                                            matchFailed("\"\\u0638\"");
                                                                          }
                                                                        }
                                                                        if (result0 === null) {
                                                                          if (input.charCodeAt(pos) === 1609) {
                                                                            result0 = "\u0649";
                                                                            pos++;
                                                                          } else {
                                                                            result0 = null;
                                                                            if (reportFailures === 0) {
                                                                              matchFailed("\"\\u0649\"");
                                                                            }
                                                                          }
                                                                          if (result0 === null) {
                                                                            if (input.charCodeAt(pos) === 1570) {
                                                                              result0 = "\u0622";
                                                                              pos++;
                                                                            } else {
                                                                              result0 = null;
                                                                              if (reportFailures === 0) {
                                                                                matchFailed("\"\\u0622\"");
                                                                              }
                                                                            }
                                                                            if (result0 === null) {
                                                                              if (input.charCodeAt(pos) === 1573) {
                                                                                result0 = "\u0625";
                                                                                pos++;
                                                                              } else {
                                                                                result0 = null;
                                                                                if (reportFailures === 0) {
                                                                                  matchFailed("\"\\u0625\"");
                                                                                }
                                                                              }
                                                                              if (result0 === null) {
                                                                                if (input.charCodeAt(pos) === 1590) {
                                                                                  result0 = "\u0636";
                                                                                  pos++;
                                                                                } else {
                                                                                  result0 = null;
                                                                                  if (reportFailures === 0) {
                                                                                    matchFailed("\"\\u0636\"");
                                                                                  }
                                                                                }
                                                                                if (result0 === null) {
                                                                                  if (input.charCodeAt(pos) === 1579) {
                                                                                    result0 = "\u062B";
                                                                                    pos++;
                                                                                  } else {
                                                                                    result0 = null;
                                                                                    if (reportFailures === 0) {
                                                                                      matchFailed("\"\\u062B\"");
                                                                                    }
                                                                                  }
                                                                                }
                                                                              }
                                                                            }
                                                                          }
                                                                        }
                                                                      }
                                                                    }
                                                                  }
                                                                }
                                                              }
                                                            }
                                                          }
                                                        }
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_rqm() {
        var result0;
        
        result0 = parse_wahad();
        if (result0 === null) {
          result0 = parse_tnein();
          if (result0 === null) {
            result0 = parse_tlateh();
            if (result0 === null) {
              result0 = parse_arbaa();
              if (result0 === null) {
                result0 = parse_khamseh();
                if (result0 === null) {
                  result0 = parse_sitteh();
                  if (result0 === null) {
                    result0 = parse_sabaa();
                    if (result0 === null) {
                      result0 = parse_tmaneh();
                      if (result0 === null) {
                        result0 = parse_tisaa();
                        if (result0 === null) {
                          result0 = parse_siffr();
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
        return result0;
      }
      
      function parse_wahad() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1633) {
          result0 = "\u0661";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0661\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "1" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tnein() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1634) {
          result0 = "\u0662";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0662\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "2" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tlateh() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1635) {
          result0 = "\u0663";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0663\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "3" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_arbaa() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1636) {
          result0 = "\u0664";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0664\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "4" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_khamseh() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1637) {
          result0 = "\u0665";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0665\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "5" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sitteh() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1638) {
          result0 = "\u0666";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0666\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "6" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_sabaa() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1639) {
          result0 = "\u0667";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0667\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "7" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tmaneh() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1640) {
          result0 = "\u0668";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0668\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "8" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_tisaa() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1641) {
          result0 = "\u0669";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0669\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "9" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_siffr() {
        var result0;
        var pos0;
        
        pos0 = pos;
        if (input.charCodeAt(pos) === 1632) {
          result0 = "\u0660";
          pos++;
        } else {
          result0 = null;
          if (reportFailures === 0) {
            matchFailed("\"\\u0660\"");
          }
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "0" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      function parse_space() {
        var result0, result1;
        var pos0;
        
        pos0 = pos;
        if (/^[ \n\t]/.test(input.charAt(pos))) {
          result1 = input.charAt(pos);
          pos++;
        } else {
          result1 = null;
          if (reportFailures === 0) {
            matchFailed("[ \\n\\t]");
          }
        }
        if (result1 !== null) {
          result0 = [];
          while (result1 !== null) {
            result0.push(result1);
            if (/^[ \n\t]/.test(input.charAt(pos))) {
              result1 = input.charAt(pos);
              pos++;
            } else {
              result1 = null;
              if (reportFailures === 0) {
                matchFailed("[ \\n\\t]");
              }
            }
          }
        } else {
          result0 = null;
        }
        if (result0 !== null) {
          result0 = (function(offset) { return "" })(pos0);
        }
        if (result0 === null) {
          pos = pos0;
        }
        return result0;
      }
      
      
      function cleanupExpected(expected) {
        expected.sort();
        
        var lastExpected = null;
        var cleanExpected = [];
        for (var i = 0; i < expected.length; i++) {
          if (expected[i] !== lastExpected) {
            cleanExpected.push(expected[i]);
            lastExpected = expected[i];
          }
        }
        return cleanExpected;
      }
      
      function computeErrorPosition() {
        /*
         * The first idea was to use |String.split| to break the input up to the
         * error position along newlines and derive the line and column from
         * there. However IE's |split| implementation is so broken that it was
         * enough to prevent it.
         */
        
        var line = 1;
        var column = 1;
        var seenCR = false;
        
        for (var i = 0; i < Math.max(pos, rightmostFailuresPos); i++) {
          var ch = input.charAt(i);
          if (ch === "\n") {
            if (!seenCR) { line++; }
            column = 1;
            seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            line++;
            column = 1;
            seenCR = true;
          } else {
            column++;
            seenCR = false;
          }
        }
        
        return { line: line, column: column };
      }
      
      
      var result = parseFunctions[startRule]();
      
      /*
       * The parser is now in one of the following three states:
       *
       * 1. The parser successfully parsed the whole input.
       *
       *    - |result !== null|
       *    - |pos === input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 2. The parser successfully parsed only a part of the input.
       *
       *    - |result !== null|
       *    - |pos < input.length|
       *    - |rightmostFailuresExpected| may or may not contain something
       *
       * 3. The parser did not successfully parse any part of the input.
       *
       *   - |result === null|
       *   - |pos === 0|
       *   - |rightmostFailuresExpected| contains at least one failure
       *
       * All code following this comment (including called functions) must
       * handle these states.
       */
      if (result === null || pos !== input.length) {
        var offset = Math.max(pos, rightmostFailuresPos);
        var found = offset < input.length ? input.charAt(offset) : null;
        var errorPosition = computeErrorPosition();
        
        throw new this.SyntaxError(
          cleanupExpected(rightmostFailuresExpected),
          found,
          offset,
          errorPosition.line,
          errorPosition.column
        );
      }
      
      return result;
    },
    
    /* Returns the parser source code. */
    toSource: function() { return this._source; }
  };
  
  /* Thrown when a parser encounters a syntax error. */
  
  result.SyntaxError = function(expected, found, offset, line, column) {
    function buildMessage(expected, found) {
      var expectedHumanized, foundHumanized;
      
      switch (expected.length) {
        case 0:
          expectedHumanized = "end of input";
          break;
        case 1:
          expectedHumanized = expected[0];
          break;
        default:
          expectedHumanized = expected.slice(0, expected.length - 1).join(", ")
            + " or "
            + expected[expected.length - 1];
      }
      
      foundHumanized = found ? quote(found) : "end of input";
      
      return "Expected " + expectedHumanized + " but " + foundHumanized + " found.";
    }
    
    this.name = "SyntaxError";
    this.expected = expected;
    this.found = found;
    this.message = buildMessage(expected, found);
    this.offset = offset;
    this.line = line;
    this.column = column;
  };
  
  result.SyntaxError.prototype = Error.prototype;
  
  return result;
})();